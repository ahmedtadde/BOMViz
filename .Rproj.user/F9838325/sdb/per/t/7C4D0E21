{
    "collab_server" : "",
    "contents" : "shinyServer(function(input, output) {\n    \n    # =========================================================================\n    # Reactive resources\n    # =========================================================================\n    resource.studios <- reactive({\n      return(dataframes$studios[YEAR >= input$studios_years[1] & YEAR <= input$studios_years[2],])\n    })\n    \n    resource.oscars <- reactive({\n        return(dataframes$oscars[YEAR >= input$oscars_years[1] & YEAR <= input$oscars_years[2],])\n    })\n    \n    resource.actors <- reactive({\n        return(dataframes$actors)\n    })\n    \n    resource.directors <- reactive({\n        return(dataframes$directors)\n    })\n    \n    resource.producers <- reactive({\n        return(dataframes$producers)\n    })\n    \n    \n    \n    # =========================================================================\n    # Server outputs : Datatables\n    # =========================================================================\n    output$studios_datatable <- DT::renderDataTable({\n      datatable(\n        resource.studios(),\n        filter = 'top',\n        rownames = FALSE,\n        selection=\"multiple\", \n        escape=FALSE,\n        extensions = c(\n          'Buttons',\n          'Responsive'\n        ),\n        \n        options = list(\n          dom = 'Blfrtip',\n          autoWidth = TRUE,\n          buttons = list('excel', 'csv'),\n          Responsive = TRUE,\n          lengthMenu = list(c(10, 20, 50, 100), c('10', '20','50','100'))\n        )\n      )\n    })\n    \n    output$oscars_datable <- DT::renderDataTable({\n      datatable(\n        resource.oscars(),\n        filter = 'top',\n        rownames = FALSE,\n        selection=\"multiple\", \n        escape=FALSE,\n        extensions = c(\n          'Buttons',\n          'Responsive'\n        ),\n        \n        options = list(\n          dom = 'Blfrtip',\n          autoWidth = TRUE,\n          buttons = list('excel', 'csv'),\n          Responsive = TRUE,\n          lengthMenu = list(c(10, 20, 50, 100), c('10', '20','50','100'))\n        )\n      )\n    })\n    \n    output$actors_datatable <- DT::renderDataTable({\n      datatable(\n        resource.actors(),\n        filter = 'top',\n        rownames = FALSE,\n        selection=\"multiple\", \n        escape=FALSE,\n        extensions = c(\n          'Buttons',\n          'Responsive'\n        ),\n        \n        options = list(\n          dom = 'Blfrtip',\n          autoWidth = TRUE,\n          buttons = list('excel', 'csv'),\n          Responsive = TRUE,\n          lengthMenu = list(c(10, 20, 50, 100), c('10', '20','50','100'))\n        )\n      )\n    })\n    \n    output$directors_datatable <- DT::renderDataTable({\n      datatable(\n        resource.directors(),\n        filter = 'top',\n        rownames = FALSE,\n        selection=\"multiple\", \n        escape=FALSE,\n        extensions = c(\n          'Buttons',\n          'Responsive'\n        ),\n        \n        options = list(\n          dom = 'Blfrtip',\n          autoWidth = TRUE,\n          buttons = list('excel', 'csv'),\n          Responsive = TRUE,\n          lengthMenu = list(c(10, 20, 50, 100), c('10', '20','50','100'))\n        )\n      )\n    })\n    \n    output$producers_datatable <- DT::renderDataTable({\n      datatable(\n        resource.producers(),\n        filter = 'top',\n        rownames = FALSE,\n        selection=\"multiple\", \n        escape=FALSE,\n        extensions = c(\n          'Buttons',\n          'Responsive'\n        ),\n        \n        options = list(\n          dom = 'Blfrtip',\n          autoWidth = TRUE,\n          buttons = list('excel', 'csv'),\n          Responsive = TRUE,\n          lengthMenu = list(c(10, 20, 50, 100), c('10', '20','50','100'))\n        )\n      )\n    })\n    \n    \n    \n    \n    # =========================================================================\n    # Server outputs : Plots\n    # =========================================================================\n    output$studios_box_office_timeseries <- renderPlot({\n        # get data from dataframe\n      \n        df <- copy(resource.studios())\n        setorder(df, -YEAR, RANK)[,STUDIO:= factor(STUDIO, levels=unique(STUDIO))]\n        # df <- copy(resource.studios()) %>%\n        #     arrange(-YEAR, RANK) %>%  # order by rank\n        #     mutate(STUDIO = factor(STUDIO, levels=unique(STUDIO)))  # convert to factor for fixing plot sort ordering\n\n        # Build colormap\n        studios <- unique(df$STUDIO)  # get list of unique studios in filtered dataframe\n        colormap <- helper.colormapper(studios, c(input$studios_studio1, input$studios_studio2, input$studios_studio3))\n        \n        # plotting\n        plot <- ggplot(df, aes(x=YEAR, y=BOXOFFICE, group=STUDIO, color=STUDIO)) + \n            geom_point(size=3) + \n            geom_line(size=1.2, alpha=0.5) + \n            geom_text(data=subset(df, YEAR == input$studios_years_max),  # hack to label only at end of visualization\n                      aes(x=YEAR, y=BOXOFFICE, label=STUDIO),\n                      size=5,\n                      hjust=1) + \n            scale_color_manual(values=colormap) + \n            scale_x_continuous(breaks=seq(min(df$YEAR), max(df$YEAR), by=1)) + \n            scale_y_continuous(labels=dollar) + \n            labs(title=\"Annual Top 10 Studio Rankings by Box Office\",\n                 x=\"Year\",\n                 y=\"Box Office ($M)\") + \n            theme(panel.background = element_blank())\n        return(plot)\n    })\n    \n    \n    output$studios_movies_facet <- renderPlot({\n        # get data from dataframe\n        df <- resource.studios() %>%\n            arrange(-YEAR, -MOVIES_COUNT) %>%  # order by most movies_count\n            mutate(STUDIO = factor(STUDIO, levels=unique(STUDIO)))  # convert to factor for fixing plot sort ordering\n        \n        # Build colormap\n        studios <- unique(df$STUDIO)  # get list of unique studios in filtered dataframe\n        colormap <- helper.colormapper(studios, c(input$studios_studio1, input$studios_studio2, input$studios_studio3))\n        \n        # plotting\n        plot <- ggplot(df, aes(x=YEAR, y=MOVIES_COUNT, group=STUDIO, fill=STUDIO)) + \n            facet_wrap(~ STUDIO, nrow=4) + \n            geom_bar(stat=\"identity\") + \n            scale_fill_manual(values=colormap) + \n            scale_x_continuous(breaks=as.integer(seq(min(df$YEAR), max(df$YEAR), length.out=3))) + \n            labs(title=\"Annual Top 10 Studio Rankings by Movies Produced\",\n                 x=\"Year\",\n                 y=\"Movies Produced\") + \n            theme(panel.background = element_blank(),\n                  panel.margin = unit(2, \"lines\"))\n        return(plot)\n    })\n    \n    \n    output$oscars_timeline <- renderPlot({\n        # get data from dataframe\n        metric <- input$oscars_metric\n        df <- resource.oscars() %>%\n            arrange(YEAR) %>%  # order by year\n            mutate(MOVIE = sprintf(\"%s (%s)\", MOVIE, YEAR),\n                   MOVIE = factor(MOVIE, levels=unique(MOVIE)))  # convert to factor for fixing plot sort ordering\n        \n        # plotting\n        mean_value = round(mean(df[, metric]), 2)\n        plot <- ggplot(df, aes_string(x=\"MOVIE\", y=metric, fill=\"STUDIO\")) + \n            geom_bar(stat=\"identity\", alpha=0.5) + \n            geom_text(aes_string(label=metric),\n                      size=3.5, hjust=0, fontface=\"italic\") + \n            geom_hline(yintercept=mean_value, linetype=\"longdash\", color=\"steelblue\") + \n            scale_fill_manual(values=D3COLORMAP20) + \n            scale_y_continuous(breaks=pretty_breaks(5)) + \n            labs(title=sprintf(\"Annual Oscar Winners\\n(by %s, mean: %s)\", metric, mean_value),\n                 x=\"Oscar Winners\",\n                 y=metric) + \n            theme(panel.background = element_blank(),\n                  axis.ticks.y = element_blank())\n        plot <- plot + coord_flip()  # flip plot coordinates\n        return(plot)\n    })\n    \n    \n    output$oscars_correlations <- renderPlot({\n        # get data from dataframe\n        df <- resource.oscars() %>%  # select numeric columns for generating correlation matrix using reshape2's melt function\n            select(BOXOFFICE, NOMINATIONS, WINS, WIN_PERCENTAGE)\n        \n        # plotting\n        plot <- ggplot(melt(cor(df)), aes(x=Var1, y=Var2, fill=value)) + \n            geom_tile() + \n            geom_text(aes(label=formatC(value, digits=2, format=\"f\")), size=4) + \n            scale_fill_gradient(low=\"white\", high=\"steelblue\") + \n            labs(title=\"Oscars Correlation Matrix\", x=\"\", y=\"\")\n        return(plot)\n    })\n    \n    \n    output$actors_boxoffice <- renderPlot({\n        # get data from dataframe\n        metric <- input$actors_movies_metric\n        df <- resource.actors() %>%\n            arrange_(metric) %>%  # dplyr arrange_ is arrange but allowing passing strings, in our case we pass a dynamic reactive variable\n            mutate(PERSON = factor(PERSON, levels=unique(PERSON)))  # convert to factor for fixing plot sort ordering\n        \n        # Build colormap\n        actors <- unique(df$PERSON)  # get list of unique actors in filtered dataframe\n        colormap <- helper.colormapper(actors, c(input$actors_actor1, input$actors_actor2, input$actors_actor3))\n        \n        # plotting\n        mean_value = round(mean(df[, metric]), 2)\n        plot <- ggplot(df, aes_string(x=\"PERSON\", y=metric, fill=\"PERSON\")) + \n            geom_bar(stat=\"identity\", alpha=0.75) + \n            geom_text(aes_string(label=metric),\n                      size=3.5, hjust=0, fontface=\"italic\") + \n            geom_hline(yintercept=mean_value, linetype=\"longdash\", color=\"steelblue\") + \n            scale_fill_manual(values=colormap) + \n            scale_y_continuous(breaks=pretty_breaks(5)) + \n            labs(title=sprintf(\"Top 50 Actors\\n(by %s, mean: %s)\", metric, mean_value),\n                 x=\"Actors\",\n                 y=sprintf(\"%s\", metric)) + \n            theme(panel.background = element_blank(),\n                  legend.position = \"none\",\n                  axis.ticks.y = element_blank())\n        # conditional best movie name layer\n        if(metric == \"BEST_BO\") {\n            plot <- plot + geom_text(aes(y=0, label=BEST_PICTURE), size=3.5, color=\"gray40\", hjust=0, fontface=\"italic\")\n        }\n        plot <- plot + coord_flip()  # flip plot coordinates\n        return(plot)\n    })\n    \n    \n    output$directors_boxoffice <- renderPlot({\n        # get data from dataframe\n        metric <- input$directors_movies_metric\n        df <- resource.directors() %>%\n            arrange_(metric) %>%  # dplyr arrange_ is arrange but allowing passing strings, in our case we pass a dynamic reactive variable\n            mutate(PERSON = factor(PERSON, levels=unique(PERSON)))  # convert to fdirector for fixing plot sort ordering\n        \n        # Build colormap\n        directors <- unique(df$PERSON)  # get list of unique directors in filtered dataframe\n        colormap <- helper.colormapper(directors, c(input$directors_director1, input$directors_director2, input$directors_director3))\n        \n        # plotting\n        mean_value = round(mean(df[, metric]), 2)\n        plot <- ggplot(df, aes_string(x=\"PERSON\", y=metric, fill=\"PERSON\")) + \n            geom_bar(stat=\"identity\", alpha=0.75) + \n            geom_text(aes_string(label=metric),\n                      size=3.5, hjust=0, fontface=\"italic\") + \n            geom_hline(yintercept=mean_value, linetype=\"longdash\", color=\"steelblue\") + \n            scale_fill_manual(values=colormap) + \n            scale_y_continuous(breaks=pretty_breaks(5)) + \n            labs(title=sprintf(\"Top 50 Directors\\n(by %s, mean: %s)\", metric, mean_value),\n                 x=\"Directors\",\n                 y=sprintf(\"%s\", metric)) + \n            theme(panel.background = element_blank(),\n                  legend.position = \"none\",\n                  axis.ticks.y = element_blank())\n        # conditional best movie name layer\n        if(metric == \"BEST_BO\") {\n            plot <- plot + geom_text(aes(y=0, label=BEST_PICTURE), size=3.5, color=\"gray40\", hjust=0, fontface=\"italic\")\n        }\n        plot <- plot + coord_flip()  # flip plot coordinates\n        return(plot)\n    })\n    \n    \n    output$producers_boxoffice <- renderPlot({\n        # get data from dataframe\n        metric <- input$producers_movies_metric\n        df <- resource.producers() %>%\n            arrange_(metric) %>%  # dplyr arrange_ is arrange but allowing passing strings, in our case we pass a dynamic reactive variable\n            mutate(PERSON = factor(PERSON, levels=unique(PERSON)))  # convert to fproducer for fixing plot sort ordering\n        \n        # Build colormap\n        producers <- unique(df$PERSON)  # get list of unique producers in filtered dataframe\n        colormap <- helper.colormapper(producers, c(input$producers_producer1, input$producers_producer2, input$producers_producer3))\n        \n        # plotting\n        mean_value = round(mean(df[, metric]), 2)\n        plot <- ggplot(df, aes_string(x=\"PERSON\", y=metric, fill=\"PERSON\")) + \n            geom_bar(stat=\"identity\", alpha=0.75) + \n            geom_text(aes_string(label=metric),\n                      size=3.5, hjust=0, fontface=\"italic\") + \n            geom_hline(yintercept=mean_value, linetype=\"longdash\", color=\"steelblue\") + \n            scale_fill_manual(values=colormap) + \n            scale_y_continuous(breaks=pretty_breaks(5)) + \n            labs(title=sprintf(\"Top 50 Producers\\n(by %s, mean: %s)\", metric, mean_value),\n                 x=\"Producers\",\n                 y=sprintf(\"%s\", metric)) + \n            theme(panel.background = element_blank(),\n                  legend.position = \"none\",\n                  axis.ticks.y = element_blank())\n        # conditional best movie name layer\n        if(metric == \"BEST_BO\") {\n            plot <- plot + geom_text(aes(y=0, label=BEST_PICTURE), size=3.5, color=\"gray40\", hjust=0, fontface=\"italic\")\n        }\n        plot <- plot + coord_flip()  # flip plot coordinates\n        return(plot)\n    })\n    \n    \n    \n    # =========================================================================\n    # Server outputs : Downloads\n    # =========================================================================\n    output$studios_download <- downloadHandler(\n        filename <- function() {\n            sprintf(\"studios_%s.csv\", Sys.Date())\n        },\n        content <- function(filename) {\n            df <- resource.studios()\n            write.csv(df, file=filename, row.names=FALSE)\n        }\n    )\n    \n    output$oscars_download <- downloadHandler(\n        filename <- function() {\n            sprintf(\"oscars_%s.csv\", Sys.Date())\n        },\n        content <- function(filename) {\n            df <- resource.oscars()\n            write.csv(df, file=filename, row.names=FALSE)\n        }\n    )\n    \n    output$actors_download <- downloadHandler(\n        filename <- function() {\n            sprintf(\"actors_%s.csv\", Sys.Date())\n        },\n        content <- function(filename) {\n            df <- resource.actors()\n            write.csv(df, file=filename, row.names=FALSE)\n        }\n    )\n    \n    output$directors_download <- downloadHandler(\n        filename <- function() {\n            sprintf(\"directors_%s.csv\", Sys.Date())\n        },\n        content <- function(filename) {\n            df <- resource.directors()\n            write.csv(df, file=filename, row.names=FALSE)\n        }\n    )\n    \n    output$producers_download <- downloadHandler(\n        filename <- function() {\n            sprintf(\"producers_%s.csv\", Sys.Date())\n        },\n        content <- function(filename) {\n            df <- resource.producers()\n            write.csv(df, file=filename, row.names=FALSE)\n        }\n    )\n})",
    "created" : 1493412398716.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2720588992",
    "id" : "7C4D0E21",
    "lastKnownWriteTime" : 1493414858,
    "last_content_update" : 1493414858983,
    "path" : "~/GITHUB/RShiny-BoxOfficeMojo-master/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}